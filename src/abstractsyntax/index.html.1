<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
                      "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<base href="http://melt.cs.umn.edu/">
<title>MELT Home - Minnesota Extensible Language Tools</title>
<link rel="stylesheet" href="melt.css" type="text/css">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

<table class="banner">
 <tr class="row1">
  <td class="row1">
   <a href="http://www.cs.umn.edu">
    <font color="white">Department of Computer Science and 
                        Engineering&nbsp;&nbsp;</font></a>
  </td>
 </tr>
 <tr class="row2">
 <td class="row2">
   <h1 class="row2">Minnesota Extensible Language Tools</h1>
 </td>
 </tr>
</table>

<table>
<tr>
<td class="leftnav">
<h4 class="attop">MELT pages</h4>
<ul class="leftnav">
<li class="leftnav">
    <a href="index.html">MELT Home</a></li>
<li class="leftnav">
    <a href="http://www-users.cs.umn.edu/~evw/pubs.html">Papers</a></li>
<li class="leftnav">Software
   <ul class="leftnav">
    <li class="leftnav">
        - <a href="silver/index.html">Silver</a></li>
    <li class="leftnav">
        - <a href="copper/index.html">Copper</a></li>
    <li class="leftnav">
        - <a href="software.html">ableJ</a></li>
    <li class="leftnav">
        - <a href="ableP/index.html">ableP</a></li>
   </ul>
</li>
<li class="leftnav">
    <a href="people.html">People</a></li>

<li class="leftnav">
    <a href="https://wwws.cs.umn.edu/mm-cs/listinfo/melt-help">
    "melt-help" maillist</a></li>
</ul>
</td>

<td class="main">
<h2 class="attop">Research:</h2>

<p> Our main research interests are in the declarative
specification of programming languages semantics and transformations
for optimization.  We are specifically interested in techniques that
lead to a high degree of modularity in the composition of language
specifications.  This is so that specifications for language features
can be easily combined to create specifications for new languages.  We
are thus interested in tools that automatically compose and implement such
specifications to create pre-processors, compilers and optimizers for
the newly specified languages.</p>

<h2>Motivation:</h2> 

<p> Software development is a time-consuming and error-prone process
that often results in unreliable and insecure software.  At least part
of the reason for these undesirable results is that large <i>semantic
gap</i> between the programmer&apos;s high-level understanding of the
problem and the relatively low-level programming language in which the
problem solutions are encoded.  Thus, programmers cannot "say what
they mean" but must encode their ideas as programming idioms at a
lower level of abstraction.  This wastes time and is the source of
many errors.</p>

<p> A long range goal is to improve the software development process
and the quality of the resulting software artifacts by reducing the
semantic gap.  Extensible languages provide a promising way to achieve
this goal.  An extensible language can easily be extended with the
unique combination of domain-specific language features that raises
the level of abstraction to that of the task at hand.  The extended
language provides the programmer with language constructs,
optimizations, and static program analyses to significantly simplify
the software development process.</p>


<h2>Tools and Applications:</h2> 
<p> In these efforts we have developed tools for specifying the
semantics and optimizing transformations of extensible languages and
used them to develop a number of extensible language specifications.
</p>

<h4Tools:</h4
<ul>
<li><p>Silver is an attribute grammar specification language (and
its supporting tools) that allow for the highly-modular specification of
languages.  Silver has higher-order,reference, and production-valued
attributes.  It also supports <i>forwarding</i> (see the paper
<a href="http://www.umsec.umn.edu/publications/Forwarding-Attribute-Grammars-Modular-Language-Design">
"Forwarding
in Attribute Grammars for Modular Language Design"</a>) and collections.
These features, especially forwarding,
provide a high-level declarative means for <i>modularly</i> specifying
languages and language extensions.</p>

<p>More information about Silver, including papers, a Silver compiler,
and Silver documentation, can be found <a href="silver">here</a>.  </p>
</li>

<li><p>Copper is an integrated parser and context-aware scanner
generator.  It was developed to address the challenges in
modularly specifying the concrete syntax of extensible languages and
language extensions.</p>

<ul>
<li><b>Scanning:</b> In cases where different extensions want to
associate the same lexeme with different tokens or specify different
precedence and associativity rules for binary operators we cannot rely
on traditional tools such as Lex.  We have developed a scanning
technique that uses the <i>parser context</i> to disambiguate
different terminals that match the same lexeme and to treat binary
operators differently in different embedded languages; for example, if
an extension has operators "*" and "+" but assigns them different
precedences and associativities than are assigned them in the
extension's imperative host language.</li>

<li><b>Parsing:</b> Traditional tools such as Yacc that rely on the
construction of LR parsing tables are often quite brittle in that it
is easy to introduce new concrete syntax rules (grammar productions)
that cause conflicts in the generated parser tables.  This brittleness
is significantly mitigated by the context aware scanning described
above.</li> 
</ul>

<p>From language specifications based, as expected, on context-free
grammars and regular expressions Copper generates an LR-parser and
integrated context-aware scanner.  Details of this approach can be
found in our paper <a
href="http://www.umsec.umn.edu/publications/Context-Aware-Scanning-Parsing-Extensible-Language">"Context-Aware
Scanning for Parsing Extensible Languages"</a>.</p>

<p>More information on Copper can be found <a href="copper">here</a>. </p>
</li>
</ul>


<p>We have used Silver and the associated tools described above to
implement a number of extensible languages in several projects.</p>

<ul>

<li><p><a href="ellf-data/index.html">Language
extensions for data-intensive applications</a>:  In this
collaborative project we are developing language extensions to simpify
the development of efficient, scalable data-intensive applications.
An extensible specification of ANSI C, <i>ableC</i>, is being
developed as the host language for this effort.</p>
</li>

<li><p>Silver: As mentioned above, Silver itself is implemented in
<a href="silver">Silver</a>.</p>
</li>

<li><p>ableJ: We previously worked on an extensible specification of
Java 1.4 in Silver.  This work was described in our ECOOP 2007 paper
<a href="http://www.umsec.umn.edu/publications/Attribute-Grammar-based-Language-Extensions-Java">"Attribute
  Grammar-based Language Extensions for Java"</a>.</p>
</li>

</ul>


<h2>Acknowledgements:</h2>
<p>We are very grateful to the <a href="http://www.nsf.gov">National
Science Foundation</a>, the McKnight Foundation, the University of
Minnesota, and IBM for funding different aspects of our research.</p>

</td>

</tr>
</table>

</body>
</html>
